# unsigned int bct_to_bin( unsigned int bct ) {
#        unsigned int acc = bct;
#
#        acc = acc - (((acc >>  2) & 0x33333333) * (    4 -    3));
#        acc = acc - (((acc >>  4) & 0x0F0F0F0F) * (   16 -    9));
#        acc = acc - (((acc >>  8) & 0x00FF00FF) * (  256 -   81));
#        acc = acc - (((acc >> 16) & 0x0000FFFF) * (65536 - 6561));
#
#        return acc;
# }
# see: http://homepage.divms.uiowa.edu/~jones/ternary/bct.shtml
.globl trinary_convert

.data
magics: .word 2,  0x33333333, 1,
              4,  0x0f0f0f0f, 7,
              8,  0x00ff00ff, 175,
              16, 0x0000ffff, 58975

.text
trinary_convert:
	li    $v0, 0

	la    $t3, magics
	li    $t4, 3 #BCT2B counter

LOOP:
	lb    $t0, 0($a0)
	beqz  $t0, BCT2B

	andi  $t0, $t0, 0x0f
	sll   $v0, $v0, 2
	or    $v0, $v0, $t0
	addi  $a0, $a0, 1

	j     LOOP
BCT2B:
	beqz  $t4, STOP

	lw    $t0, 0($t3) # word * 0
	lw    $t1, 4($t3) # word * 1
	lw    $t2, 8($t3) # word * 2

	move  $t5, $v0
	srlv  $t5, $t5, $t0
	and   $t5, $t5, $t1
	mul   $t5, $t5, $t2
	sub   $v0, $v0, $t5

	subi  $t4, $t4, 1
	addi  $t3, $t3, 12 # shift by 3 words
	j     BCT2B
STOP:
	jr    $ra

